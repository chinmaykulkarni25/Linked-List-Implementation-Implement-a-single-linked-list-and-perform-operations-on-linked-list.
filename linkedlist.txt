#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end
void insert(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* last = *head;
    while (last->next) {
        last = last->next;
    }
    last->next = newNode;
}

// Function to delete a node by value
void deleteNode(struct Node** head, int key) {
    struct Node* current = *head;
    struct Node* previous = NULL;

    // If the head node itself holds the key
    if (current && current->data == key) {
        *head = current->next;
        free(current);
        return;
    }

    // Search for the key to be deleted
    while (current && current->data != key) {
        previous = current;
        current = current->next;
    }

    // If the key was not found
    if (current == NULL) return;

    // Unlink the node
    previous->next = current->next;
    free(current);
}

// Function to traverse and print the linked list
void traverse(struct Node* head) {
    struct Node* current = head;
    while (current) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

// Main function to demonstrate the linked list operations
int main() {
    struct Node* head = NULL;

    // Create linked list and insert nodes
    insert(&head, 1);
    insert(&head, 2);
    insert(&head, 3);

    // Traverse the linked list
    printf("Linked List:\n");
    traverse(head);

    // Delete a node
    deleteNode(&head, 2);
    printf("After deleting 2:\n");
    traverse(head);

    return 0;
}
